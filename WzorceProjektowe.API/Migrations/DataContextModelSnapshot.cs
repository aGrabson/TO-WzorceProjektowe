// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WzorceProjektowe.API.Data;

#nullable disable

namespace WzorceProjektowe.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WzorceProjektowe.API.Entities.PatternEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DynamicsCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToInterpret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patterns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("53fed944-34ce-45ac-9b4f-d74868b2357a"),
                            Description = "The Adapter pattern allows objects with incompatible interfaces to collaborate.",
                            DynamicsCode = "",
                            Name = "Adapter",
                            Schema = "interface ITarget {\r\n    void Request();\r\n}\r\n\r\nclass Adaptee {\r\n    public void SpecificRequest() {\r\n        Console.WriteLine(\"Specific request\");\r\n    }\r\n}\r\n\r\nclass Adapter : ITarget {\r\n    private Adaptee _adaptee;\r\n\r\n    public Adapter(Adaptee adaptee) {\r\n        _adaptee = adaptee;\r\n    }\r\n\r\n    public void Request() {\r\n        _adaptee.SpecificRequest();\r\n    }\r\n}\r\n\r\nclass Client {\r\n    static void Main(string[] args) {\r\n        Adaptee adaptee = new Adaptee();\r\n        ITarget adapter = new Adapter(adaptee);\r\n        adapter.Request();\r\n    }\r\n}",
                            ToInterpret = "",
                            Type = "Structural"
                        },
                        new
                        {
                            Id = new Guid("aa316d64-b022-4f56-91d7-6cb186b6c212"),
                            Description = "The Bridge pattern decouples an abstraction from its implementation so that the two can vary independently.",
                            DynamicsCode = "",
                            Name = "Bridge",
                            Schema = "",
                            ToInterpret = "",
                            Type = "Structural"
                        },
                        new
                        {
                            Id = new Guid("944b82a9-dd6d-4ad6-ab8c-cb61734dfad8"),
                            Description = "The Composite pattern composes objects into tree structures to represent part-whole hierarchies.",
                            DynamicsCode = "",
                            Name = "Composite",
                            Schema = "",
                            ToInterpret = "",
                            Type = "Structural"
                        },
                        new
                        {
                            Id = new Guid("15003969-5592-42bb-b3de-7b859bec03ef"),
                            Description = "The Decorator pattern attaches additional responsibilities to objects dynamically.",
                            DynamicsCode = "\r\n#splitfile#\r\nusing System;\r\npublic class #C# : #AC1#\r\n{\r\n    #F;#C#\r\n    #M;#C#\r\n    public #C#(#I1# component) : base(component)\r\n    {\r\n    }\r\n\r\n    public override void Operation()\r\n    {\r\n        base.Operation();\r\n        AddedBehavior();\r\n    }\r\n\r\n    private void AddedBehavior()\r\n    {\r\n        Console.WriteLine(\"Added behavior by ConcreteDecorator\");\r\n    }\r\n}\r\n",
                            Name = "Decorator",
                            Schema = "#splitfile#\r\npublic interface #I1#\r\n{\r\n    #F;#I1#\r\n    #M;#I1#\r\n    void Operation();\r\n}\r\n#splitfile#\r\npublic class #CC1# : #I1#\r\n{\r\n    #F;#CC1#\r\n    #M;#CC1#\r\n    public void Operation()\r\n    {\r\n        Console.WriteLine(\"ConcreteComponent operation\");\r\n    }\r\n}\r\n#splitfile#\r\npublic abstract class #AC1# : #I1#\r\n{\r\n    protected #I1# component;\r\n    \r\n    #F;#AC1#\r\n    #M;#AC1#\r\n\r\n    public #AC1#(#I1# component)\r\n    {\r\n        this.component = component;\r\n    }\r\n\r\n    public virtual void Operation()\r\n    {\r\n        component.Operation();\r\n    }\r\n}\r\n\r\n#DYNAMICS#\r\n#splitfile#\r\npublic class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        // Tworzymy konkretne komponenty i dekorujemy je\r\n        #I1# component = new #CC1#();\r\n        #I1# decoratedComponent = new #C2#(component);\r\n\r\n        // Wywołujemy operację na dekoratorze, która przejdzie przez wszystkie dekoratory\r\n        decoratedComponent.Operation();\r\n\r\n        /*\r\n            Wynik działania programu:\r\n            ConcreteComponent operation\r\n            Added behavior by ConcreteDecorator\r\n        */\r\n    }\r\n}",
                            ToInterpret = "#I1#FajnyInterfejs# #CC1#Klasa# #AC1#AbstrakcyjnaKlasa# #C2#KlasaDekoratora# ",
                            Type = "Structural"
                        },
                        new
                        {
                            Id = new Guid("ea3f28d0-62d0-4367-bb7b-ade9b42ec6e7"),
                            Description = "The Facade pattern provides a unified interface to a set of interfaces in a subsystem.",
                            DynamicsCode = "",
                            Name = "Facade",
                            Schema = "",
                            ToInterpret = "",
                            Type = "Structural"
                        },
                        new
                        {
                            Id = new Guid("7859bad9-4ff6-49f2-acd6-dbeb95806210"),
                            Description = "The Flyweight pattern minimizes memory usage and improves performance by sharing as much as possible with similar objects.",
                            DynamicsCode = "",
                            Name = "Flyweight",
                            Schema = "",
                            ToInterpret = "",
                            Type = "Structural"
                        },
                        new
                        {
                            Id = new Guid("cdb89e66-33c1-427b-b43c-3a879247bc25"),
                            Description = "The Proxy pattern provides a surrogate or placeholder for another object to control access to it.",
                            DynamicsCode = "",
                            Name = "Proxy",
                            Schema = "",
                            ToInterpret = "",
                            Type = "Structural"
                        },
                        new
                        {
                            Id = new Guid("f3c983c7-ea59-4066-8631-1178d234dc14"),
                            Description = "The Factory Method pattern defines an interface for creating objects, but allows subclasses to alter the type of objects that will be created.",
                            DynamicsCode = "",
                            Name = "Factory Method",
                            Schema = "",
                            ToInterpret = "",
                            Type = "Creational"
                        },
                        new
                        {
                            Id = new Guid("fb0db5bd-806c-4946-8d17-8ca1b481cef7"),
                            Description = "The Abstract Factory pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes.",
                            DynamicsCode = "",
                            Name = "Abstract Factory",
                            Schema = "",
                            ToInterpret = "",
                            Type = "Creational"
                        },
                        new
                        {
                            Id = new Guid("a71e4bcb-a115-4d5c-9f9e-ed9eb4cd891b"),
                            Description = "The Builder pattern separates the construction of a complex object from its representation, allowing the same construction process to create different representations.",
                            DynamicsCode = "",
                            Name = "Builder",
                            Schema = "",
                            ToInterpret = "",
                            Type = "Creational"
                        },
                        new
                        {
                            Id = new Guid("423bd3dd-6dff-43d4-ad6a-008e5133fd28"),
                            Description = "The Prototype pattern creates new objects by copying an existing object, known as the prototype.",
                            DynamicsCode = "",
                            Name = "Prototype",
                            Schema = "",
                            ToInterpret = "",
                            Type = "Creational"
                        },
                        new
                        {
                            Id = new Guid("b1148d01-9fd8-474a-8e56-da59bb65d8bb"),
                            Description = "The Singleton pattern ensures that a class has only one instance and provides a global point of access to that instance.",
                            DynamicsCode = "",
                            Name = "Singleton",
                            Schema = "",
                            ToInterpret = "",
                            Type = "Creational"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
